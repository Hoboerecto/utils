%YAML 1.2
---
name: JSONNE
file_extensions:
  - json
  - jsonne
scope: source.test
contexts:
  main:
    - include: value
  array:
    - match: '\['
      scope: punctuation.section.array.begin.json
      push:
        - meta_scope: meta.structure.array.json
        - match: '\]'
          scope: punctuation.section.array.end.json
          pop: true
        - include: value
        - match: ","
          scope: punctuation.separator.array.json
        - match: '[^\s\]]'
          scope: invalid.illegal.expected-array-separator.json
  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.documentation.json
        - match: \*/
          pop: true
    - match: /\*
      scope: punctuation.definition.comment.json
      push:
        - meta_scope: comment.block.json
        - match: \*/
          pop: true
    - match: (//).*$\n?
      scope: comment.line.double-slash.js
      captures:
        1: punctuation.definition.comment.json
  constant:
    - match: \b(?:true|false|null)\b
      scope: constant.language.json
  number:
    # handles integer and decimal numbers
    - match: |-
        (?x:         # turn on extended mode
          (
            -?
            (?:\d+\.\d+|\.\d+)
            (?:
              [eE]   # an e character
              [+-]?  # followed by an option +/-
              \d+    # followed by one or more digits
            )?       # make exponent optional
          )
          |
          (-?0[Xx][0-9A-Fa-f]+)
          |
          (-?0[Oo][0-7]+)
          |
          (-?0[Ob][01]+)
          |
          (-?[0-9]+)
        )([^\s,\]})]*)
      captures:
        1: constant.numeric.float.jsonne
        2: constant.numeric.hex.jsonne
        3: constant.numeric.octal.jsonne
        4: constant.numeric.binary.jsonne
        5: constant.numeric.integer.jsonne
        6: invalid.illegal.unexpected.json
  object:
    # a JSON object
    - match: '\{'
      scope: punctuation.section.dictionary.begin.json
      push:
        - meta_scope: meta.structure.dictionary.json
        - match: '\}'
          scope: punctuation.section.dictionary.end.json
          pop: true
        - match: ''''
          scope: punctuation.definition.string.begin.json
          push:
            - meta_scope: meta.structure.dictionary.key.json string.quoted.double.json
            - include: inside-string-1
        - match: '"'
          scope: punctuation.definition.string.begin.json
          push:
            - meta_scope: meta.structure.dictionary.key.json string.quoted.double.json
            - include: inside-string-2
        - match: '\w+'
          scope: string.unquoted.json
          push:
            - meta_scope: meta.structure.dictionary.key.json string.unquoted.json
            - match: '\b'
              pop: true
        - include: comments
        - match: ":"
          scope: punctuation.separator.dictionary.key-value.json
          push:
            - meta_scope: meta.structure.dictionary.value.json
            - match: '(,)|(?=\})'
              captures:
                1: punctuation.separator.dictionary.pair.json
              pop: true
            - include: value
            - match: '[^\s,]'
              scope: invalid.illegal.expected-dictionary-separator.json
  
  value-wrapped:
    - match: '\('
      scope: punctuation.definition.brackets.begin.json
      push:
        - meta_scope: definition.value.wrapped.json
        - match: '\)'
          scope: punctuation.definition.brackets.end.json
          pop: true
        - include: value
        - match: '\S'
          scope: invalid.illegal.expected-dictionary-separator.json
  
  string-0:
    - match: '\w+(?=\(|\{|\[)'
      scope: string.unquoted.json support.module.json
    - match: '\w+'
      scope: string.unquoted.json
    - include: object
    - include: array
  
  string-1:
    - match: '(?:(base64|hex)|(\S*?(?=\()))?\s*('')'
      captures:
        1: keyword.other.string-encoding.json
        2: invalid.illegal.unrecognized-string-encoding.json
        3: punctuation.definition.string.begin.json
      push: inside-string-1
  inside-string-1:
    - meta_scope: string.quoted.single.json
    - match: ''''
      scope: punctuation.definition.string.end.json
      pop: true
    - include: string-escape-1
    - match: $\n?
      scope: invalid.illegal.unclosed-string.json
      pop: true
  string-escape-1:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ['\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.json
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json
  
  string-2:
    - match: '(?:(base64|hex)|(\S*?(?=\()))?\s*(")'
      captures:
        1: keyword.other.string-encoding.json
        2: invalid.illegal.unrecognized-string-encoding.json
        3: punctuation.definition.string.begin.json
      push: inside-string-2
  inside-string-2:
    - meta_scope: string.quoted.double.json
    - match: '"'
      scope: punctuation.definition.string.end.json
      pop: true
    - include: string-escape-2
    - match: $\n?
      scope: invalid.illegal.unclosed-string.json
      pop: true
  string-escape-2:
    - match: |-
        (?x:                # turn on extended mode
          \\                # a literal backslash
          (?:               # ...followed by...
            ["\\/bfnrt]     # one of these characters
            |               # ...or...
            u               # a u
            [0-9a-fA-F]{4}  # and four hex digits
          )
        )
      scope: constant.character.escape.json
    - match: \\.
      scope: invalid.illegal.unrecognized-string-escape.json
  value:
    - include: value-wrapped
    - include: constant
    - include: number
    - include: link
    - include: string-1
    - include: string-2
    - include: string-0
    - include: array
    - include: object
    - include: comments
  
  link:
    - match: '@'
      scope: punctuation.definition.keyword.json punctuation.definition.variable.json
      push:
        - meta_scope: keyword.link.json
        - meta_content_scope: meta.support.module.path.json
        - match: (\.)
          scope: punctuation.link.continue.json
        - include: string-0
        - include: string-1
        - include: string-2
        - match: (?=\S)
          pop: true
